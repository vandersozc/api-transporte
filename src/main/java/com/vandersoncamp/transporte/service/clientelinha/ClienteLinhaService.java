package com.vandersoncamp.transporte.service.clientelinha;import com.vandersoncamp.transporte.dto.ClienteLinhaDTO;import com.vandersoncamp.transporte.exception.BusinessException;import com.vandersoncamp.transporte.model.Cliente;import com.vandersoncamp.transporte.model.ClienteLinha;import com.vandersoncamp.transporte.model.LinhaLotacao;import com.vandersoncamp.transporte.model.LinhaOnibus;import com.vandersoncamp.transporte.repository.ClienteLinhaRepository;import com.vandersoncamp.transporte.service.cliente.ClienteService;import com.vandersoncamp.transporte.service.linhatransporte.LinhaDtoService;import com.vandersoncamp.transporte.service.linhatransporte.LinhaLotacaoService;import com.vandersoncamp.transporte.service.linhatransporte.LinhaOnibusService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class ClienteLinhaService {    @Autowired    private ClienteLinhaRepository repository;    @Autowired    private ClienteService clienteService;    @Autowired    private LinhaDtoService linhaDtoService;    @Autowired    private LinhaOnibusService linhaOnibusService;    @Autowired    private LinhaLotacaoService linhaLotacaoService;    public ClienteLinhaService(ClienteLinhaRepository repository) {        this.repository = repository;    }    public void save(ClienteLinhaDTO dto) {        validate(dto);        dto.setCliente(getCliente(dto.getCliente().getId()));        saveLinhaOnibus(dto);        saveLinhaLotacao(dto);    }    private void saveLinhaOnibus(ClienteLinhaDTO dto) {        if (dto.getLinhasOnibus() != null) {            for (LinhaOnibus linhaOnibus : dto.getLinhasOnibus()) {                LinhaOnibus linha = linhaOnibusService.geraLinhaOnibus(linhaOnibus);                ClienteLinha clienteLinha = linhaDtoService.toClienteLinhaOnibus(linha, dto.getCliente());                if (!repository.existsByClienteOnibus(dto.getCliente().getId(), linha.getId())) {                    repository.save(clienteLinha);                }            }        }    }    private void saveLinhaLotacao(ClienteLinhaDTO dto) {        if (dto.getLinhasLotacoes() != null) {            for (LinhaLotacao linhaLotacao : dto.getLinhasLotacoes()) {                LinhaLotacao linha = linhaLotacaoService.geraLinhaLotacao(linhaLotacao);                ClienteLinha clienteLinha = linhaDtoService.toClienteLinhaLotacao(linha, dto.getCliente());                if (!repository.existsByClienteLotacao(dto.getCliente().getId(), linha.getId())) {                    repository.save(clienteLinha);                }            }        }    }    public void removeClienteLinhaByCliente(Long idCliente) {        repository.deleteInBatch(findLinhasByCliente(idCliente));    }    public Iterable<ClienteLinha> findLinhasByCliente(Long idCliente) {        return repository.findLinhasByCliente(idCliente);    }    private Cliente getCliente(Long idCliente) {        return clienteService.findById(idCliente);    }    private void validate(ClienteLinhaDTO dto) {        if (!clienteService.existsById(dto.getCliente().getId())) {            throw new BusinessException("Cliente n√£o possui cadastro");        }    }}