package com.vandersoncamp.transporte.service.cliente;import com.vandersoncamp.transporte.exception.BusinessException;import com.vandersoncamp.transporte.model.Cliente;import com.vandersoncamp.transporte.repository.ClienteRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.Optional;@Servicepublic class ClienteService {    @Autowired    private ClienteRepository repository;    public ClienteService(ClienteRepository repository) {        this.repository = repository;    }    public Iterable<Cliente> findAll() {        return repository.findAll();    }    public Cliente save(Cliente cliente) {        validate(cliente);        return repository.save(cliente);    }    public Cliente findById(Long id) {        return repository.findById(id).orElse(null);    }    public void remove(Long id) {        repository.deleteById(id);    }    public Iterable<Cliente> findByNome(String nome) {        return repository.findByNome(nome);    }    public Optional<Cliente> findByDocumento(String documento) {        return repository.findByDocumento(documento);    }    private void validate(Cliente cliente) {        Optional<Cliente> optional = repository.findByDocumento(cliente.getDocumento());        if (optional.isPresent() && (optional.get().getId() != cliente.getId())) {            throw new BusinessException("Existe outro cliente com o mesmo cpf");        }    }}