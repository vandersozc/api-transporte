package com.vandersoncamp.transporte.repository;import com.vandersoncamp.transporte.enuns.EstadoEnum;import com.vandersoncamp.transporte.model.Endereco;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;import org.springframework.test.context.TestPropertySource;import org.springframework.test.context.jdbc.Sql;import org.springframework.test.context.junit4.SpringRunner;import static org.assertj.core.api.Assertions.assertThat;@Sql(value = "/load-database.sql", executionPhase = Sql.ExecutionPhase.BEFORE_TEST_METHOD)@Sql(value = "/clean-database.sql", executionPhase = Sql.ExecutionPhase.AFTER_TEST_METHOD)@RunWith(SpringRunner.class)@DataJpaTest@TestPropertySource("classpath:application-test.properties")public class EnderecoRepositoryTest {    @Autowired    private EnderecoRepository enderecoRepository;    @Test    public void enderecoFindByLogradouroTrue() {        Iterable<Endereco> iterable = enderecoRepository.findByLogradouro("Avenida Centenário");        iterable.forEach(endereco -> {                    assertThat(endereco.getLogradouro()).isEqualTo("Avenida Centenário");                    assertThat(endereco.getCep()).isEqualTo("88802971");                    assertThat(endereco.getNumero()).isEqualTo(10);                    assertThat(endereco.getLocalidade()).isEqualTo("Criciúma");                    assertThat(endereco.getBairro()).isEqualTo("Centro");                    assertThat(endereco.getIbge()).isEqualTo(4204608);                    assertThat(endereco.getUf()).isEqualTo(EstadoEnum.SC);                    assertThat(endereco.getUnidade()).isEqualTo("Unidade");                }        );    }    @Test    public void enderecoFindByLogradouroFalse() {        Iterable<Endereco> iterable = enderecoRepository.findByLogradouro("Endereçoo inválido");        iterable.forEach(endereco ->                assertThat(endereco.getLogradouro()).isNullOrEmpty()        );    }    @Test    public void enderecoFindByCepTrue() {        Endereco endereco = enderecoRepository.findByCep("88802500");        assertThat(endereco.getLogradouro()).isEqualTo("Rua Antônio Gabriel Machado");        assertThat(endereco.getCep()).isEqualTo("88802500");        assertThat(endereco.getNumero()).isEqualTo(89);        assertThat(endereco.getLocalidade()).isEqualTo("Criciúma");        assertThat(endereco.getBairro()).isEqualTo("São Cristóvão");        assertThat(endereco.getIbge()).isEqualTo(4204608);        assertThat(endereco.getUf()).isEqualTo(EstadoEnum.SC);        assertThat(endereco.getUnidade()).isEqualTo(null);    }    @Test    public void enderecoFindByCepFalse() {        Endereco endereco = enderecoRepository.findByCep("88882511");        assertThat(endereco).isNull();    }}