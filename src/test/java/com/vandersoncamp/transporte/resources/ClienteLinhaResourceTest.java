package com.vandersoncamp.transporte.resources;import com.vandersoncamp.transporte.TransporteApplicationTests;import com.vandersoncamp.transporte.dto.ClienteLinhaDTO;import com.vandersoncamp.transporte.exception.BusinessException;import com.vandersoncamp.transporte.model.Cliente;import com.vandersoncamp.transporte.model.LinhaLotacao;import com.vandersoncamp.transporte.model.LinhaOnibus;import org.junit.Before;import org.junit.Test;import org.springframework.boot.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import java.util.ArrayList;import java.util.List;import static io.restassured.RestAssured.given;import static io.restassured.http.ContentType.JSON;import static org.hamcrest.Matchers.empty;import static org.hamcrest.Matchers.not;import static org.hamcrest.Matchers.equalTo;public class ClienteLinhaResourceTest extends TransporteApplicationTests {    private ClienteLinhaDTO clientelinha;    @LocalServerPort    private int port;    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setId(1L);        cliente.setDocumento("49765258216");        cliente.setEmail("email@email.com.br");        cliente.setNome("Teste cliente");        cliente.setTelefone(767678689L);        return cliente;    }    private List<LinhaOnibus> listLinhaOnibus() {        LinhaOnibus linhaOnibus = new LinhaOnibus();        List<LinhaOnibus> list = new ArrayList<>();        linhaOnibus.setId(1L);        linhaOnibus.setNome("Linha Avenida");        linhaOnibus.setCodigo("367-2");        list.add(linhaOnibus);        return list;    }    private List<LinhaLotacao> listLinhaLotacao() {        LinhaLotacao linhaLotacao = new LinhaLotacao();        List<LinhaLotacao> list = new ArrayList<>();        linhaLotacao.setId(1L);        linhaLotacao.setNome("Lotação parque");        linhaLotacao.setCodigo("987A-1");        list.add(linhaLotacao);        return list;    }    private ClienteLinhaDTO getClienteLinhaDTO() {        ClienteLinhaDTO dto = new ClienteLinhaDTO();        dto.setCliente(getCliente());        return dto;    }    @Before    public void setUp() {        clientelinha = getClienteLinhaDTO();    }    @Test    public void clienteLinhaInsertClienteNull() {        ClienteLinhaDTO linhaDTO = getClienteLinhaDTO();        Cliente cliente = new Cliente();        cliente.setId(5L);        linhaDTO.setLinhasOnibus(listLinhaOnibus());        linhaDTO.setCliente(cliente);        given().port(port).request().contentType(JSON)                .body(linhaDTO)                .when()                .post("/cliente-linha")                .then()                .body("message", equalTo("Cliente não possui cadastro"));    }    @Test    public void clienteLinhaInsertOnibus() {        ClienteLinhaDTO linhaDTO = getClienteLinhaDTO();        linhaDTO.setLinhasOnibus(listLinhaOnibus());        given().port(port).request().contentType(JSON)                .body(linhaDTO)                .when()                .post("/cliente-linha")                .then()                .statusCode(HttpStatus.CREATED.value());    }    @Test    public void clienteLinhaExistsByClienteOnibusFalse() {        LinhaOnibus linhaOnibus = new LinhaOnibus();        List<LinhaOnibus> list = new ArrayList<>();        linhaOnibus.setId(5L);        linhaOnibus.setNome("Linha Inválida");        linhaOnibus.setCodigo("344-7");        list.add(linhaOnibus);        ClienteLinhaDTO linhaDTO = getClienteLinhaDTO();        linhaDTO.setLinhasOnibus(list);        given().port(port).request().contentType(JSON)                .body(linhaDTO)                .when()                .post("/cliente-linha")                .then()                .statusCode(HttpStatus.CREATED.value());    }    @Test    public void clienteLinhaInsertLotacao() {        ClienteLinhaDTO linhaDTO = getClienteLinhaDTO();        linhaDTO.setLinhasLotacoes(listLinhaLotacao());        given().port(port).request().contentType(JSON)                .body(linhaDTO)                .when()                .post("/cliente-linha")                .then()                .statusCode(HttpStatus.CREATED.value());    }    @Test    public void clienteLinhaExistsByClienteLotacaoFalse() {        LinhaLotacao linhaLotacao = new LinhaLotacao();        List<LinhaLotacao> list = new ArrayList<>();        linhaLotacao.setId(5L);        linhaLotacao.setNome("Linha Inválida");        linhaLotacao.setCodigo("344-7");        list.add(linhaLotacao);        ClienteLinhaDTO linhaDTO = getClienteLinhaDTO();        linhaDTO.setLinhasLotacoes(list);        given().port(port).request().contentType(JSON)                .body(linhaDTO)                .when()                .post("/cliente-linha")                .then()                .statusCode(HttpStatus.CREATED.value());    }    @Test    public void clienteLinhaFindLinhasByCliente() {        given().port(port).contentType(JSON)                .pathParam("id", "1")                .get("/cliente-linha/cliente/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", not(empty()));    }    @Test    public void clienteLinhaFindLinhasByClienteEmpity() {        given().port(port).contentType(JSON)                .pathParam("id", "5")                .get("/cliente-linha/cliente/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", empty());    }}