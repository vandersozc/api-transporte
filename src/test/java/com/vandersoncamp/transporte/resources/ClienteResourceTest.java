package com.vandersoncamp.transporte.resources;import com.vandersoncamp.transporte.TransporteApplicationTests;import com.vandersoncamp.transporte.model.Cliente;import org.junit.Before;import org.junit.Test;import org.springframework.boot.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import static io.restassured.RestAssured.given;import static io.restassured.http.ContentType.JSON;import static org.hamcrest.Matchers.*;public class ClienteResourceTest extends TransporteApplicationTests {    private Cliente cliente;    @LocalServerPort    private int port;    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setNome("Teste api rest");        cliente.setDocumento("81492817970");        return cliente;    }    @Before    public void setUp() {        cliente = getCliente();    }    @Test    public void clienteInsert() {        given().port(port).request().contentType(JSON)                .body(cliente)                .when()                .post("/clientes")                .then()                .statusCode(HttpStatus.CREATED.value())                .body("id", equalTo(3),                        "nome", equalTo("Teste api rest"),                        "documento", equalTo("81492817970"));    }    @Test    public void clienteFindById() {        given().port(port).contentType(JSON)                .pathParam("id", "1")                .get("/clientes/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("id", equalTo(1),                        "nome", equalTo("Cliente válido"),                        "documento", equalTo("69999118518"));    }    @Test    public void clienteFindByNome() {        given().port(port).contentType(JSON)                .queryParam("nome", "Cliente válido")                .get("/clientes/filter")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", not(empty()));    }    @Test    public void clienteFindByNomeEmpty() {        given().port(port).contentType(JSON)                .queryParam("nome", "Sem dados")                .get("/clientes/filter")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", empty());    }    @Test    public void clienteFindAll() {        given().port(port).contentType(JSON)                .get("/clientes")                .then()                .statusCode(HttpStatus.OK.value())                .body("empty", equalTo(false));    }    @Test    public void clienteUpdateOk() {        cliente.setId(1L);        cliente.setNome("Teste api rest alterado");        cliente.setDocumento("26399895537");        cliente.setEmail("rest_api_update@gmail.com");        given().port(port).contentType(JSON)                .pathParam("id", "1")                .body(cliente)                .put("clientes/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("id", equalTo(1),                        "nome", equalTo("Teste api rest alterado"),                        "documento", equalTo("26399895537"));    }    @Test    public void clienteUpdateBadRequest() {        cliente.setId(1L);        given().port(port).contentType(JSON)                .pathParam("id", "3")                .body(cliente)                .put("clientes/{id}")                .then()                .statusCode(HttpStatus.BAD_REQUEST.value());    }    @Test    public void clienteRemove() {        given().port(port).contentType(JSON)                .pathParam("id", "2")                .when()                .delete("/clientes/{id}")                .then()                .statusCode(HttpStatus.NO_CONTENT.value());    }}