package com.vandersoncamp.transporte.service.clientelinha;import com.vandersoncamp.transporte.enuns.TipoTransporteEnum;import com.vandersoncamp.transporte.model.Cliente;import com.vandersoncamp.transporte.model.ClienteLinha;import com.vandersoncamp.transporte.repository.ClienteLinhaRepository;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.mock.mockito.MockBean;import org.springframework.test.context.junit4.SpringRunner;import java.time.LocalDate;import java.util.Optional;import static org.mockito.Mockito.verify;import static org.mockito.Mockito.when;@RunWith(SpringRunner.class)public class ClienteLinhaServiceTest {    @MockBean    private ClienteLinhaRepository repository;    private ClienteLinhaService service;    private ClienteLinha clienteLinha;    private ClienteLinha getClienteLinha() {        ClienteLinha clienteLinha = new ClienteLinha();        clienteLinha.setId(1L);        clienteLinha.setCliente(getCliente());        clienteLinha.setTipoTransporte(TipoTransporteEnum.LOTACAO);        return clienteLinha;    }    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setId(1L);        cliente.setDocumento("08988765453");        cliente.setEmail("email@email.com.br");        cliente.setNome("Teste cliente");        cliente.setObservacao("Observação");        cliente.setTelefone(767678689L);        return cliente;    }    @Before    public void setUp() {        service = new ClienteLinhaService(repository);        clienteLinha = getClienteLinha();        when(repository.findById(clienteLinha.getId())).thenReturn(Optional.of(new ClienteLinha()));    }    @Test    public void clienteLinhaSave() {        service.save(clienteLinha);        verify(repository).save(clienteLinha);    }    @Test    public void clienteLinhaFindAll() {        service.findAll();        verify(repository).findAll();    }    @Test    public void clienteLinhaFindById() {        service.findById(clienteLinha.getId());        verify(repository).findById(clienteLinha.getId());    }    @Test    public void clienteLinhaDelete() {        service.remove(clienteLinha.getId());        verify(repository).deleteById(clienteLinha.getId());    }    @Test    public void clienteLinhaFindByCliente() {        service.findLinhasByCliente(clienteLinha.getCliente().getId());        verify(repository).findLinhasByCliente(clienteLinha.getCliente().getId());    }}