package com.vandersoncamp.transporte.resource;import com.vandersoncamp.transporte.TransporteApplicationTests;import com.vandersoncamp.transporte.enuns.TipoTransporteEnum;import com.vandersoncamp.transporte.model.Cliente;import com.vandersoncamp.transporte.model.ClienteLinha;import org.junit.Before;import org.junit.Test;import org.springframework.boot.web.server.LocalServerPort;import org.springframework.http.HttpStatus;import static io.restassured.RestAssured.given;import static io.restassured.http.ContentType.JSON;import static org.hamcrest.Matchers.*;public class ClienteLinhaResourceTest extends TransporteApplicationTests {    private ClienteLinha clientelinha;    @LocalServerPort    private int port;    private ClienteLinha getClienteLinha() {        ClienteLinha clienteLinha = new ClienteLinha();        clienteLinha.setCliente(getCliente());        clienteLinha.setTipoTransporte(TipoTransporteEnum.LOTACAO);        return clienteLinha;    }    private Cliente getCliente() {        Cliente cliente = new Cliente();        cliente.setId(1L);        return cliente;    }    @Before    public void setUp() {        clientelinha = getClienteLinha();    }    @Test    public void clienteLinhaInsert() {        given().port(port).request().contentType(JSON)                .body(clientelinha)                .when()                .post("/cliente-linha")                .then()                .statusCode(HttpStatus.CREATED.value())                .body("id", equalTo(3),                        "cliente.id", equalTo(1),                        "tipoTransporte", equalTo(TipoTransporteEnum.LOTACAO.name()));    }    @Test    public void clienteLinhaFindById() {        given().port(port).contentType(JSON)                .pathParam("id", "1")                .get("/cliente-linha/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("id", equalTo(1),                        "cliente.id", equalTo(1),                        "tipoTransporte", equalTo(TipoTransporteEnum.ONIBUS.name()));    }    @Test    public void clienteLinhaFindByCliente() {        given().port(port).contentType(JSON)                .pathParam("id", "1")                .get("/cliente-linha/cliente/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", not(empty()));    }    @Test    public void clienteLinhaFindByClienteEmpty() {        given().port(port).contentType(JSON)                .pathParam("id", 3L)                .get("/cliente-linha/cliente/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("results", empty());    }    @Test    public void clienteLinhaFindAll() {        given().port(port).contentType(JSON)                .get("/cliente-linha")                .then()                .statusCode(HttpStatus.OK.value())                .body("empty", equalTo(false));    }    @Test    public void clienteLinhaUpdateOk() {        clientelinha.setId(1L);        clientelinha.setTipoTransporte(TipoTransporteEnum.LOTACAO);        given().port(port).contentType(JSON)                .pathParam("id", "1")                .body(clientelinha)                .put("/cliente-linha/{id}")                .then()                .statusCode(HttpStatus.OK.value())                .body("id", equalTo(1),                        "tipoTransporte", equalTo(TipoTransporteEnum.LOTACAO.name()));    }    @Test    public void clienteLinhaUpdateBadRequest() {        clientelinha.setId(1L);        given().port(port).contentType(JSON)                .pathParam("id", "3")                .body(clientelinha)                .put("/cliente-linha/{id}")                .then()                .statusCode(HttpStatus.BAD_REQUEST.value());    }    @Test    public void clienteLinhaRemove() {        given().port(port).contentType(JSON)                .pathParam("id", "2")                .when()                .delete("/cliente-linha/{id}")                .then()                .statusCode(HttpStatus.NO_CONTENT.value());    }////    @Test//    public void clienteLinhaBuscarOnibus() {//        given().port(port).contentType(JSON)//                .when()//                .get("/cliente-linha/onibus")//                .then()//                .statusCode(HttpStatus.OK.value())//                .body("results", not(empty()));//    }////    @Test//    public void clienteLinhaBuscarLotacao() {//        given().port(port).contentType(JSON)//                .when()//                .get("/cliente-linha/lotacao")//                .then()//                .statusCode(HttpStatus.OK.value())//                .body("results", not(empty()));//    }}